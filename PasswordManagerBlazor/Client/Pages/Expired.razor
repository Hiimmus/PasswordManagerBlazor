@page "/expired"
@attribute [Authorize]
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager navigationManager
@inject HttpClient HttpClient
@using Microsoft.AspNetCore.Authorization;
@using PasswordManagerBlazor.Shared.DTOs;


<head>
    <meta charset="UTF-8">
    <link href="css/main.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css" integrity="sha512-YWzhKL2whUzgiheMoBFwW8CKV4qpHQAEuvilg9FAn5VJUDwKZZxkJNuGM4XkWuk94WCrrwslk8yWNGmY1EduTA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body>

    <div class="alerts">
        @{
            if (IsErrorVisible)
            {
                <div class="audun_warn">
                    <div class="alert alert-danger">
                        <i class="fa fa-exclamation-triangle" aria-hidden="true"></i> Errors:
                        <li>This user is not active or invalid username/password.</li>
                    </div>
                </div>
            }

            if (IsInfoVisible)
            {
                <div class="audun_info">
                    <i class="fa fa-info-circle" aria-hidden="true"></i>
                    <li>Password copied to clipboard.</li>
                </div>
            }

            if (IsLogoutVisible)
            {
                <div class="audun_success">
                    <div class="alert alert-info">
                        <i class="fa fa-check-circle" aria-hidden="true"></i> Success:
                        <li>You have been succesfully logged out.</li>
                    </div>
                </div>
            }
        }
    </div>

    <div class="hamburger-menu">
        <input id="menu__toggle" type="checkbox" />
        <label class="menu__btn" for="menu__toggle">
            <span></span>
        </label>

        <ul class="menu__box">
            <li><a class="menu__item" href="/index">My Passwords</a></li>
            <li><a class="menu__item" href="/duplicates">Duplicates</a></li>
            <li><a class="menu__item" href="/expired">Expired</a></li>
            <li><a class="menu__item" href="/">Logout</a></li>
        </ul>
    </div>
    <br>
    <br>
    <div class="container">
        <div class="table_header">
            <div class="search_password">
                <form id="search" method="get">
                    <h2>Expired passwords</h2>
                    <input type="text" name="keyword" size="50" placeholder="Find your password">
                    <button>Search</button>
                </form>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>DOMAIN</th>
                        <th>LOGIN</th>
                        <th id="password">PASSWORD</th>
                        <th id="last_change">LAST CHANGE</th>
                        <th id="add_button">
                            <a href="/password/add" target="_parent" method="get">
                                <button class="ghost">Add</button>
                            </a>
                        </th>
                    </tr>
                </thead>
            </table>
        </div>
        <div class="table_content">
            <table class="table">
                <tbody>
                    @foreach (var password in passwordsDto)
                    {
                        <tr>
                            <td>@password.Url</td>
                            <td>@password.Email</td>
                            <td id="password">
                                <form id="clipboard_button_form">
                                    <button @onclick="@(async () => await CopyToClipboard(password.PasswordHash))">Copy to clipboard</button>
                                </form>
                            </td>
                            <td id="last_change">@password.LastChange.ToString("dd-MM-yyyy HH:mm")</td>
                            <td id="options">
                                <form id="update_button_form" action="#" method="post">
                                    <button id="update_button">Update</button>
                                </form>
                                <form id="delete_button_form" action="#" method="delete">
                                    <button id="delete_button">Delete</button>
                                </form>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</body>
@*<style>
/*    #blazor-error-ui {
        display: none;
    }*/
</style>*@
@code {

    private bool IsErrorVisible { get; set; }
    private bool IsInfoVisible { get; set; }
    private bool IsLogoutVisible { get; set; }

    private List<PasswordDto> passwordsDto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPasswords();
    }

    private async Task LoadPasswords()
    {
        passwordsDto = await Http.GetFromJsonAsync<List<PasswordDto>>("api/password/expired");
    }

    private async Task CopyToClipboard(string passwordHash)
    {
        await JSRuntime.InvokeVoidAsync("clipboardCopy", passwordHash);
        IsInfoVisible = true;
    }

    private void UpdatePassword(int id)
    {
        navigationManager.NavigateTo($"/updated-password/{id}");
    }

    private async Task DeletePassword(int id)
    {
        try
        {
            var response = await HttpClient.DeleteAsync($"api/password/{id}");
            if (response.IsSuccessStatusCode)
            {
                // Jeśli usunięcie się powiedzie, odśwież listę hasel
                await LoadPasswords();
            }
            else
            {
                // Obsługa błędów
                Console.WriteLine($"Error deleting password: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Obsługa wyjątków
            Console.WriteLine($"Exception deleting password: {ex.Message}");
        }
    }
}
@functions {

    protected override void OnInitialized()
{
    passwordsDto = new List<PasswordDto>
    {
        // Przykładowe dane
        
    };
}

}

