@page "/"
@inject NavigationManager navigationManager
@inject HttpClient Http
@inject IJSRuntime JsRuntime
@using PasswordManagerBlazor.Shared.DTOs
<head>
    <meta charset="UTF-8">
    <link href="css/main.css" rel="stylesheet" />
    <link href="css/alerts.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css" integrity="sha512-YWzhKL2whUzgiheMoBFwW8CKV4qpHQAEuvilg9FAn5VJUDwKZZxkJNuGM4XkWuk94WCrrwslk8yWNGmY1EduTA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
@*<div class="alerts">
    <div @if(ShowError) class="audun_warn">
        <div class="alert alert-danger">
            <i class="fa fa-exclamation-triangle" aria-hidden="true"></i> Errors:
            <li>This user is not active or invalid username/password.</li>
        </div>
    </div>

    <div @if(ShowInfo) class="audun_info">
        <i class="fa fa-info-circle" aria-hidden="true"></i>
        EXAMPLE INFORMATION
    </div>

    <div @if(ShowLogout) class="audun_success">
        <div class="alert alert-info">
            <i class="fa fa-check-circle" aria-hidden="true"></i> Success:
            <li>You have been succesfully logged out.</li>
        </div>
    </div>
</div>*@
<h2>Password Manager Login Page</h2>
<div class="container" id="container">
    <div class="form-container sign-in-container">
        <EditForm Model="loginModel" OnValidSubmit="HandleValidSubmit">
            <h1 id="sign-in">Sign in</h1>
            <div class="social-container">
                <a href="#" class="social"><i class="fa-brands fa-facebook"></i></a>
                <a href="#" class="social"><i class="fab fa-google-plus-g"></i></a>
                <a href="#" class="social"><i class="fab fa-linkedin-in"></i></a>
            </div>
            <span>or use your account</span>
            <div class="form-group">
                <label for="username"></label>
                <InputText name="username" class="form-control" @bind-Value="loginModel.Username" placeholder="Username" />
                <InputText type="password" name="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Password" />
            </div>
            <br />
            <div class="form-group">

                    <button @onclick=HandleValidSubmit @onclick:preventDefault>Sign In</button>

            </div>
        </EditForm>
    </div>
    <div class="overlay-container">
        <div class="overlay">
            <div class="overlay-panel overlay-right">
                <h1>Hello, Friend!</h1>
                <p>Enter your personal details and start journey with us</p>
                <button class="ghost" id="signUp" @onclick="NavigateToRegistration" value="Sign Up">Sign Up</button>
            </div>
        </div>
    </div>
</div>

<style>
    #blazor-error-ui {
        display: none;
    }
</style>
        @code {
    private bool ShowError { get; set; } = false;
    private bool ShowInfo { get; set; } = false;
    private bool ShowLogout { get; set; } = false;

    private LoginModel loginModel = new LoginModel();

    private async Task HandleValidSubmit()
{
   
    var response = await Http.PostAsJsonAsync<UserLoginDto>("api/user/login", new UserLoginDto 
    { 
        Email = loginModel.Username, 
        Password = loginModel.Password 

    });
     // test@example.com
     // Test123!

    if (response.IsSuccessStatusCode)
    {
        var jwtToken = await response.Content.ReadAsStringAsync();
        
        // Przechowaj token JWT w local storage przeglądarki
        await JsRuntime.InvokeVoidAsync("localStorageFunctions.setItem", "jwtToken", jwtToken);

        // Przekieruj użytkownika na inną stronę
        navigationManager.NavigateTo("index");
    }
    else
    {
        // Wyświetl komunikat o błędzie
        ShowError = true;
    }
}

    private void NavigateToRegistration()
    {
        navigationManager.NavigateTo("/user/registration");
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}

