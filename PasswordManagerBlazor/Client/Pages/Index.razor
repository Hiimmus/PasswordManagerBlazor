@using Microsoft.AspNetCore.Authorization

@page "/index"
@attribute [Authorize]
@inject IAuthService AuthService
@inject NavigationManager navigationManager
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@using PasswordManagerBlazor.Client.Service;
@using PasswordManagerBlazor.Shared.DTOs;

<head>
    <meta charset="UTF-8">
    <link href="css/main.css" rel="stylesheet" />
    <link href="css/alerts.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css" integrity="sha512-YWzhKL2whUzgiheMoBFwW8CKV4qpHQAEuvilg9FAn5VJUDwKZZxkJNuGM4XkWuk94WCrrwslk8yWNGmY1EduTA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body>

    @* Alerts *@

    @* Hamburger menu *@

    <div class="hamburger_menu">
        <input id="menu__toggle" type="checkbox" />
        <label class="menu__btn" for="menu__toggle">
            <span></span>
        </label>

        <ul class="menu__box">
            <li><a class="menu__item" href="/index">My Passwords</a></li>
            <li><a class="menu__item" href="/duplicates">Duplicates</a></li>
            <li><a class="menu__item" href="/expired">Expired</a></li>
            <li><a class="menu__item" @onclick=HandleValidSubmit @onclick:preventDefault>Logout</a></li>
        </ul>
    </div>
    <br>
    <br>
    
    <div class="container">
        <div class="table_header">
            <div class="search_password">
                <form id="search" method="get">
                    <h2>Here are your passwords</h2>
                    <input type="text" name="keyword" size="50" placeholder="Find your password">
                    <button>Search</button>
                </form>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>DOMAIN</th>
                        <th>LOGIN</th>
                        <th id="password">PASSWORD</th>
                        <th id="last_change">LAST CHANGE</th>
                        <th id="add_button">
                            <a href="/password/add" target="_parent">
                                <button class="ghost">Add</button>
                            </a>
                        </th>
                    </tr>
                </thead>
            </table>
        </div>
        <div class="table_content">
            <table class="table">
                <tbody>
                    @foreach (var password in PasswordsDto)
                    {
                        <tr>
                            <td>@password.Url</td>
                            <td>@password.Email</td>
                            <td id="password">
                                <button data-password="@password.PasswordHash" @onclick="() => CopyToClipboard(password.PasswordHash)">Copy to clipboard</button>
                            </td>
                            <td id="last_change">@password.LastChange.ToString("dd-MM-yyyy HH:mm")</td>
                             <td id="options">
                                <button id="update_button" @onclick="() => UpdatePassword(password.Id)">Update</button>
                                <button id="delete_button" @onclick="() => DeletePassword(password.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</body>
<style>
    #blazor-error-ui {
        display: none;
    }
</style>

@code {

    private string Keyword { get; set; }
    private List<PasswordDto> PasswordsDto { get; set; } = new List<PasswordDto>();

    protected override async Task OnInitializedAsync()
    {
        await GetPasswords();
    }

    private async Task GetPasswords()
    {
        try
        {
            PasswordsDto = await HttpClient.GetFromJsonAsync<List<PasswordDto>>("api/password");
        }
        catch (Exception ex)
        {
            // Handle error if needed
        }
    }

    private void Search()
    {
        // jeszcze nic
    }

    private async Task CopyToClipboard(string passwordHash)
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", passwordHash);

        await Task.Delay(TimeSpan.FromSeconds(30));

        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", string.Empty);
    }

    private void UpdatePassword(int id)
    {
        navigationManager.NavigateTo($"/updated-password/{id}");
    }

    private async Task DeletePassword(int id)
    {
        try
        {
            var response = await HttpClient.DeleteAsync($"api/password/{id}");
            if (response.IsSuccessStatusCode)
            {
                // Jeśli usunięcie się powiedzie, odśwież listę hasel
                await GetPasswords();
            }
            else
            {
                // Obsługa błędów
                Console.WriteLine($"Error deleting password: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            // Obsługa wyjątków
            Console.WriteLine($"Exception deleting password: {ex.Message}");
        }
    }

    private async void HandleValidSubmit()
    {
        await AuthService.Logout();
        navigationManager.NavigateTo("/");
    }
    
    }

