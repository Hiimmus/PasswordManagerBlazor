@page "/updated-password/{Id}"
@using Microsoft.AspNetCore.Authorization;
@using PasswordManagerBlazor.Shared.DTOs;
@inject NavigationManager navigationManager
@inject HttpClient HttpClient
@attribute [Authorize]

@using System.Security.Cryptography;
@using System.Text



<head>
    <meta charset="UTF-8">
    <link href="css/main.css" rel="stylesheet" />
    <link href="css/alerts.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css" integrity="sha512-YWzhKL2whUzgiheMoBFwW8CKV4qpHQAEuvilg9FAn5VJUDwKZZxkJNuGM4XkWuk94WCrrwslk8yWNGmY1EduTA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>

<body>
    <div class="container" id="container">
        <div class="form-container sign-in-container">
            <EditForm Model="passwordModel" OnValidSubmit="HandleValidSubmit">
                <h2>Edit existing password details</h2>
                <br>
                <div class="form-group">
                    <InputText id="firstName" class="form-control" @bind-Value="passwordModel.Email" placeholder="Login" />
                    @* Add validation error display if needed *@
                </div>
                <div class="form-group">
                    <InputText id="lastName" class="form-control" @bind-Value="passwordModel.Url" placeholder="Website url" />
                    @* Add validation error display if needed *@
                </div>
                <div class="form-group">
                    <InputText id="email" class="form-control" @bind-Value="passwordModel.PasswordHash" placeholder="Password" />
                    @* Add validation error display if needed *@
                </div>
                <div class="form-group">
                    Sugested password:
                    <i>@strongPass</i>
                </div>
                <br>
                <div class="form-group">
                    <button>Update</button>
                </div>
            </EditForm>
        </div>
        <div class="overlay-container">
            <div class="overlay">
                <div class="overlay-panel overlay-right">
                    <h1>Need to use other passwords?</h1>
                    <p>Go back to main page:</p>
                    <button class="ghost" id="signUp" @onclick="NavigateToHome" value="Home">Home</button>
                </div>
            </div>
        </div>
    </div>
    </body>
@*<style>
    #blazor-error-ui {
        display: none;
    }
</style>*@
@code {
    private PasswordModel passwordModel = new PasswordModel();
    private string strongPass;
    
    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var passwordDto = await HttpClient.GetFromJsonAsync<PasswordDto>($"api/password/{Id}");

        passwordModel.Email = passwordDto.Email;
        passwordModel.Url = passwordDto.Url;
        passwordModel.PasswordHash = passwordDto.PasswordHash;

        GenerateStrongPassword();
    }

    private async Task HandleValidSubmit()
    {
        

        var passwordDto = new PasswordDto
            {
                Id = int.Parse(Id),
                Email = passwordModel.Email,
                Url = passwordModel.Url,
                PasswordHash = passwordModel.PasswordHash,
            };


        var response = await HttpClient.PutAsJsonAsync($"api/password/{Id}", passwordDto);

        if (response.IsSuccessStatusCode)
        {

            navigationManager.NavigateTo("/index");
        }
    }

    private void GenerateStrongPassword()
    {
        const string validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&*()_+";
        const int passwordLength = 12;

        using (var rng = RandomNumberGenerator.Create())
        {
            byte[] randomBytes = new byte[passwordLength];
            rng.GetBytes(randomBytes);

            StringBuilder passwordBuilder = new StringBuilder(passwordLength);
            foreach (byte b in randomBytes)
            {
                passwordBuilder.Append(validChars[b % validChars.Length]);
            }

            strongPass = passwordBuilder.ToString();
        }
    }

    private void NavigateToHome()
    {
        navigationManager.NavigateTo("/");
    }

    public class PasswordModel
    {
        public string Email { get; set; }
        public string Url { get; set; }
        public string PasswordHash { get; set; }
    }
}


