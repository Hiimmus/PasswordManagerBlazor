@page "/user/registration"
@inject NavigationManager navigationManager
@using System.ComponentModel.DataAnnotations
@using PasswordManagerBlazor.Client.Service;
@using PasswordManagerBlazor.Shared.DTOs
@inject HttpClient Http
@inject ILogger<Registration> _logger
@inject IAuthService AuthService
@using Microsoft.Extensions.Logging
@*@inject Microsoft.Extensions.Logging.ILogger<Registration> Log*@
@using System.Text.Json 
@using System.Text
@using System.Net.Http.Headers;


<head>
    <meta charset="UTF-8">
    <link href="css/main.css" rel="stylesheet" />
    <link href="css/alerts.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta2/css/all.min.css" integrity="sha512-YWzhKL2whUzgiheMoBFwW8CKV4qpHQAEuvilg9FAn5VJUDwKZZxkJNuGM4XkWuk94WCrrwslk8yWNGmY1EduTA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<h2>Password Manager Registration Page</h2>
<br>
<EditForm Model="@registrationModel" OnValidSubmit="@HandleValidSubmit" >
    <DataAnnotationsValidator />
    <ValidationSummary />
    
<body>
	<div class="container" id="container">
		<div class="form-container sign-in-container">

    <form class=registration method="post">
                <h1 id="sign-in">Sign Up</h1>
                            <div class="form-group">
                                <InputText id="firstName" class="form-control" placeholder="First Name" @bind-Value="@registrationModel.FirstName" />
                                <ValidationMessage For="@(() => registrationModel.FirstName)" />
                            </div>
                            <div class="form-group">
                                <InputText id="lastName" class="form-control" placeholder="Last Name" @bind-Value="@registrationModel.LastName" />
                                <ValidationMessage For="@(() => registrationModel.LastName)" />
                            </div>
                            <div class="form-group">
                                <InputText id="email" class="form-control" placeholder="E-mail" @bind-Value="@registrationModel.Email" />
                                <ValidationMessage For="@(() => registrationModel.Email)" />
                            </div>
                            <div class="form-group">
                                <InputText id="confirmEmail" class="form-control" placeholder="Confirm E-mail" @bind-Value="@registrationModel.ConfirmEmail" />
                                <ValidationMessage For="@(() => registrationModel.ConfirmEmail)" />
                            </div>
                            <div class="form-group">
                                <InputText id="passwd" class="form-control" type="password" placeholder="Password" @bind-Value="@registrationModel.Password" />
                                <ValidationMessage For="@(() => registrationModel.Password)" />
                            </div>
                            <div class="form-group">
                                <InputText id="confirmPassword" class="form-control" type="password" placeholder="Confirm Password" @bind-Value="@registrationModel.ConfirmPassword" />
                                <ValidationMessage For="@(() => registrationModel.ConfirmPassword)" />
                            </div>
                            <div class="form-group">
                             <label class="control-label" for="terms">
                                     <InputCheckbox id="terms" @bind-Value="@registrationModel.Terms" /> I agree with the <a href="#">terms and conditions</a> for Registration.
                             </label>
                             <ValidationMessage For="@(() => registrationModel.Terms)" />
                        </div>
				<br>
                    <button type="submit" @onclick="HandleValidSubmit" @onclick:preventDefault>Register</button>
			</form>
		</div
		<div class="overlay-container">
			<div class="overlay">
				<div class="overlay-panel overlay-right">
					<h1>Already registered?</h1>
					<p>Go to login page:</p>
					<button class="ghost" id="signUp" @onclick="NavigateToLogin" value="Sign In">Sign In</button>
				</div>
			</div>
		</div>
	</div>
</body>
  
</EditForm>
@*<style>
    #blazor-error-ui {
        display: none;
    }
</style>*@
@code {



    private RegistrationModel registrationModel = new RegistrationModel();
    string errorMessage = string.Empty;


    private async Task HandleValidSubmit()
    {

        try
        {
            var userDto = new UserRegistrationDto
                {
                    Email = registrationModel.Email,
                    Password = registrationModel.Password,
                    FirstName = registrationModel.FirstName,
                    LastName = registrationModel.LastName
              };
            var response  = await AuthService.Register(userDto);
            
            
            if (response.Successful)
            {
                navigationManager.NavigateTo("/");
            }
            //else
            //{
            //    var errorContent = await response.Content.ReadAsStringAsync();
            //    errorMessage = $"Error: {response.StatusCode} {response.ReasonPhrase}, Content: {errorContent}";
            //    _logger.LogError(errorMessage);
            //     navigationManager.NavigateTo("error");
            //}
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
            _logger.LogError(ex, errorMessage);
        }
    }

        protected override void OnInitialized()
        {
                     //_logger.LogWarning("warning");
                  //_logger.LogError("error");
        }


    private void NavigateToLogin()
    {
        navigationManager.NavigateTo("/");
        Console.WriteLine("HandleValidSubmit method was called");
    }

    public class RegistrationModel
    {
        [Required(ErrorMessage = "First Name is required.")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Last Name is required.")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "E-mail is required.")]
        [EmailAddress(ErrorMessage = "Invalid E-mail.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Confirm E-mail is required.")]
        [EmailAddress(ErrorMessage = "Invalid Confirm E-mail.")]
        [Compare("Email", ErrorMessage = "E-mails do not match.")]
        public string ConfirmEmail { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }

        [Required(ErrorMessage = "You must agree with the terms and conditions.")]
        public bool Terms { get; set; }

        //Cmentarzysko kodu buuuu 
        //Http.DefaultRequestHeaders.Accept.Clear();
        //Http.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

        //  await Http.PostAsJsonAsync("/api/user/registration",
        //userDto = new UserRegistrationDto
        //    {
        //        Email = registrationModel.Email,
        //        Password = registrationModel.Password,
        //        FirstName = registrationModel.FirstName,
        //        LastName = registrationModel.LastName
        //  });


        
    //    private async Task TestHandleValidSubmit()
    //{
    //    // Utwórz przykładowy model
    //    RegistrationModel testModel = new RegistrationModel
    //    {
    //        FirstName = "Test",
    //        LastName = "User",
    //        Email = "testuser@example.com",
    //        ConfirmEmail = "testuser@example.com",
    //        Password = "testpassword",
    //        ConfirmPassword = "testpassword",
    //        Terms = true
    //    };

    //    // Przypisz testModel do registrationModel
    //    registrationModel = testModel;

    //    // Wywołaj metodę HandleValidSubmit
    //    await HandleValidSubmit();
    //}
    }
}
