@page "/registration"
@using System.ComponentModel.DataAnnotations

<h2>Password Manager Registration Page</h2>
<br>
<EditForm Model="@registrationModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <InputText id="firstName" class="form-control" placeholder="First Name" @bind-Value="@registrationModel.FirstName" />
    </div>
    <div class="form-group">
        <InputText id="lastName" class="form-control" placeholder="Last Name" @bind-Value="@registrationModel.LastName" />
    </div>
    <div class="form-group">
        <InputText id="email" class="form-control" placeholder="E-mail" @bind-Value="@registrationModel.Email" />
    </div>
    <div class="form-group">
        <InputText id="confirmEmail" class="form-control" placeholder="Confirm E-mail" @bind-Value="@registrationModel.ConfirmEmail" />
    </div>
    <div class="form-group">
        <InputText id="password" class="form-control" type="password" placeholder="Password" @bind-Value="@registrationModel.Password" />
    </div>
    <div class="form-group">
        <InputText id="confirmPassword" class="form-control" type="password" placeholder="Confirm Password" @bind-Value="@registrationModel.ConfirmPassword" />
    </div>
    <div class="form-group">
        <label class="control-label" for="terms">
            <InputCheckbox id="terms" @bind-Value="@registrationModel.Terms" /> I agree with the <a href="#">terms and conditions</a> for Registration.
        </label>
    </div>
    <br>
    <button type="submit" class="btn btn-success">Register</button>
</EditForm>

<p>Already registered? <a href="/">Sign In</a></p>

@code {
    private RegistrationModel registrationModel = new RegistrationModel();

    private void HandleValidSubmit()
    {
        // Logika rejestracji
    }

    public class RegistrationModel
    {
        [Required(ErrorMessage = "First Name is required.")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Last Name is required.")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "E-mail is required.")]
        [EmailAddress(ErrorMessage = "Invalid E-mail.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Confirm E-mail is required.")]
        [EmailAddress(ErrorMessage = "Invalid Confirm E-mail.")]
        [Compare("Email", ErrorMessage = "E-mails do not match.")]
        public string ConfirmEmail { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required.")]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }

        [Required(ErrorMessage = "You must agree with the terms and conditions.")]
        public bool Terms { get; set; }
    }
}
